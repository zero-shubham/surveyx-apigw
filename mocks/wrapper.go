// Code generated by MockGen. DO NOT EDIT.
// Source: wrapper.go
//
// Generated by this command:
//
//	mockgen -package wrapper -source=wrapper.go -destination=../mocks/wrapper.go *
//

// Package wrapper is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	client "github.com/zero-shubham/surveyx-apigw/client"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Critical mocks base method.
func (m *MockLogger) Critical(v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Critical", varargs...)
}

// Critical indicates an expected call of Critical.
func (mr *MockLoggerMockRecorder) Critical(v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Critical", reflect.TypeOf((*MockLogger)(nil).Critical), v...)
}

// Debug mocks base method.
func (m *MockLogger) Debug(v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), v...)
}

// Error mocks base method.
func (m *MockLogger) Error(v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), v...)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), v...)
}

// Info mocks base method.
func (m *MockLogger) Info(v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), v...)
}

// Warning mocks base method.
func (m *MockLogger) Warning(v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warning", varargs...)
}

// Warning indicates an expected call of Warning.
func (mr *MockLoggerMockRecorder) Warning(v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockLogger)(nil).Warning), v...)
}

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
	isgomock struct{}
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// CreateApp mocks base method.
func (m *MockAuthServiceClient) CreateApp(ctx context.Context, in *client.AppRequest, opts ...grpc.CallOption) (*client.AppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApp", varargs...)
	ret0, _ := ret[0].(*client.AppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp.
func (mr *MockAuthServiceClientMockRecorder) CreateApp(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockAuthServiceClient)(nil).CreateApp), varargs...)
}

// CreateAppGroup mocks base method.
func (m *MockAuthServiceClient) CreateAppGroup(ctx context.Context, in *client.AppGroupRequest, opts ...grpc.CallOption) (*client.AppGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppGroup", varargs...)
	ret0, _ := ret[0].(*client.AppGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppGroup indicates an expected call of CreateAppGroup.
func (mr *MockAuthServiceClientMockRecorder) CreateAppGroup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppGroup", reflect.TypeOf((*MockAuthServiceClient)(nil).CreateAppGroup), varargs...)
}

// CreateUser mocks base method.
func (m *MockAuthServiceClient) CreateUser(ctx context.Context, in *client.UserRequest, opts ...grpc.CallOption) (*client.UserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*client.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthServiceClientMockRecorder) CreateUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthServiceClient)(nil).CreateUser), varargs...)
}

// ExchangeToken mocks base method.
func (m *MockAuthServiceClient) ExchangeToken(ctx context.Context, in *client.ExchangeTokenRequest, opts ...grpc.CallOption) (*client.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExchangeToken", varargs...)
	ret0, _ := ret[0].(*client.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeToken indicates an expected call of ExchangeToken.
func (mr *MockAuthServiceClientMockRecorder) ExchangeToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeToken", reflect.TypeOf((*MockAuthServiceClient)(nil).ExchangeToken), varargs...)
}

// GetAppGroup mocks base method.
func (m *MockAuthServiceClient) GetAppGroup(ctx context.Context, in *client.GetAppGroupRequest, opts ...grpc.CallOption) (*client.AppGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppGroup", varargs...)
	ret0, _ := ret[0].(*client.AppGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroup indicates an expected call of GetAppGroup.
func (mr *MockAuthServiceClientMockRecorder) GetAppGroup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroup", reflect.TypeOf((*MockAuthServiceClient)(nil).GetAppGroup), varargs...)
}

// ServiceToken mocks base method.
func (m *MockAuthServiceClient) ServiceToken(ctx context.Context, in *client.ServiceTokenRequest, opts ...grpc.CallOption) (*client.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServiceToken", varargs...)
	ret0, _ := ret[0].(*client.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceToken indicates an expected call of ServiceToken.
func (mr *MockAuthServiceClientMockRecorder) ServiceToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceToken", reflect.TypeOf((*MockAuthServiceClient)(nil).ServiceToken), varargs...)
}

// UpdateApp mocks base method.
func (m *MockAuthServiceClient) UpdateApp(ctx context.Context, in *client.AppRequest, opts ...grpc.CallOption) (*client.AppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApp", varargs...)
	ret0, _ := ret[0].(*client.AppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockAuthServiceClientMockRecorder) UpdateApp(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockAuthServiceClient)(nil).UpdateApp), varargs...)
}

// UpdateAppGroup mocks base method.
func (m *MockAuthServiceClient) UpdateAppGroup(ctx context.Context, in *client.AppGroupRequest, opts ...grpc.CallOption) (*client.AppGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppGroup", varargs...)
	ret0, _ := ret[0].(*client.AppGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppGroup indicates an expected call of UpdateAppGroup.
func (mr *MockAuthServiceClientMockRecorder) UpdateAppGroup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppGroup", reflect.TypeOf((*MockAuthServiceClient)(nil).UpdateAppGroup), varargs...)
}

// UpdateUser mocks base method.
func (m *MockAuthServiceClient) UpdateUser(ctx context.Context, in *client.UserRequest, opts ...grpc.CallOption) (*client.UserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*client.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAuthServiceClientMockRecorder) UpdateUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAuthServiceClient)(nil).UpdateUser), varargs...)
}

// UserToken mocks base method.
func (m *MockAuthServiceClient) UserToken(ctx context.Context, in *client.UserTokenRequest, opts ...grpc.CallOption) (*client.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserToken", varargs...)
	ret0, _ := ret[0].(*client.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserToken indicates an expected call of UserToken.
func (mr *MockAuthServiceClientMockRecorder) UserToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserToken", reflect.TypeOf((*MockAuthServiceClient)(nil).UserToken), varargs...)
}
